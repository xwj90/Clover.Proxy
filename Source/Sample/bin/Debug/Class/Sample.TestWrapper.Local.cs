//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sample.Local {
    using System;
    using System.Linq;
    using System.Collections;
    using System.Collections.Generic;
    using Clover.Proxy.OldDesign;
    using Clover.Proxy;
    
    
    [Serializable()]
    public class Internal_Local_TestWrapper : Sample.TestWrapper {
        
        private Clover.Proxy.ProxyProviderBase _proxyProviderBase;
        
        private System.Type _proxyBaseType;
        
        public Internal_Local_TestWrapper(Clover.Proxy.ProxyProviderBase _proxyProviderBase) {
this._proxyProviderBase=_proxyProviderBase;
this._proxyBaseType = Type.GetType("Sample.TestWrapper, Sample, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null");
        }
        
        public override int Name {
            get {
Invocation getinvocation = new Invocation(new object[0], _proxyBaseType.GetProperty("Name").GetGetMethod(), this);
_proxyProviderBase.ExecuteBeforeCall(getinvocation);
var temp_returnData_1024 = base.Name;
getinvocation.ReturnValue = temp_returnData_1024;
_proxyProviderBase.AfterCall(getinvocation);
var result = 
                ((int)(getinvocation.ReturnValue));
return result;
            }
            set {
Invocation setinvocation = new Invocation(new object[]{value}, _proxyBaseType.GetProperty("Name").GetSetMethod(), this);
_proxyProviderBase.ExecuteBeforeCall(setinvocation);
base.Name = value;
_proxyProviderBase.AfterCall(setinvocation);
            }
        }
        
        public override string[] Name1 {
            get {
Invocation getinvocation = new Invocation(new object[0], _proxyBaseType.GetProperty("Name1").GetGetMethod(), this);
_proxyProviderBase.ExecuteBeforeCall(getinvocation);
var temp_returnData_1024 = base.Name1;
getinvocation.ReturnValue = temp_returnData_1024;
_proxyProviderBase.AfterCall(getinvocation);
var result = 
                ((string[])(getinvocation.ReturnValue));
return result;
            }
            set {
Invocation setinvocation = new Invocation(new object[]{value}, _proxyBaseType.GetProperty("Name1").GetSetMethod(), this);
_proxyProviderBase.ExecuteBeforeCall(setinvocation);
base.Name1 = value;
_proxyProviderBase.AfterCall(setinvocation);
            }
        }
        
        public override List<global::Sample.TestEntity> GetAll(int i, string s) {
            object[] arguments = new object[2];
            arguments[0] = i;
            arguments[1] = s;
Invocation invocation = new Invocation(arguments, _proxyBaseType.GetMethod("GetAll"), this);
_proxyProviderBase.ExecuteBeforeCall(invocation);
var temp_returnData_1024=
            base.GetAll(i, s);
            invocation.ReturnValue = temp_returnData_1024;
_proxyProviderBase.AfterCall(invocation);
var result = 
            ((System.Collections.Generic.List<Sample.TestEntity>)(invocation.ReturnValue));
return result;
        }
    }
}
